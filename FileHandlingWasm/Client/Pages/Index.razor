@page "/"
@inject FilesManager filesManager

<PageTitle>File Upload</PageTitle>

<h1>Upload Photo</h1>

@if (imageUrl != "")
{
    <img src="@imageUrl" />
    <br />
    <br />
}

<div class="dropArea @dropClass">
    Drag and drop photo or click to select a local file
    <InputFile disabled="@Uploading" OnChange="OnInputFileChangeAsync" @ondragenter="HandleDragEnter" @ondragleave="HandleDragLeave" />
</div>
<br />
<h3>Files</h3>
<ul>
    @foreach (var url in FileUrls)
    {
        <li><a href="@url">@url</a><br /></li>
    }
</ul>

@code {
    string imageUrl = "";
    string dropClass = string.Empty;
    bool Uploading = false;
    List<string> FileUrls = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await ListFiles();
    }

    void HandleDragEnter()
    {
        dropClass = "dropAreaDrag";
    }

    void HandleDragLeave()
    {
        dropClass = string.Empty;
    }

    async Task OnInputFileChangeAsync(InputFileChangeEventArgs args)
    {
        dropClass = string.Empty;

        try
        {
            //disable upload pane
            Uploading = true;
            await InvokeAsync(StateHasChanged);

            //Resize to more than 400x400
            var format = "image/png";
            var resizeImageFile = await args.File.RequestImageFileAsync(format, 400, 400);

            //read resized png data into a buffer
            var buffer = new byte[resizeImageFile.Size];
            await resizeImageFile.OpenReadStream().ReadAsync(buffer);

            //get new filename
            string newFileName = $"{Path.GetRandomFileName()}"; //.{Path.GetExtension(args.File.Name)}";
            string fileName = $"{newFileName}.png";

            //uploding png as file chunk
            var chunk = new FileChunk
                {
                    FileName = fileName,
                    Offset = 0,
                    Data = buffer,
                    FirstChunck = false,
                };

            await filesManager.UploadFileChunkAsync(chunk);

            imageUrl = $"Storage/{fileName}";

            await ListFiles();

            Uploading = false;

            // File Quality is not good in this code
        }
        catch (Exception ex)
        {
            Uploading = false;
            await InvokeAsync(StateHasChanged);
            System.Diagnostics.Debug.WriteLine(ex.Message);
            throw;
        }
    }

    async Task ListFiles()
    {
        FileUrls.Clear();

        var files = await filesManager.GetFileNamesAsync();

        foreach (var file in files)
        {
            string url = $"Storage/{file}";
            FileUrls.Add(url);
        }

        await InvokeAsync(StateHasChanged);
    }
}
